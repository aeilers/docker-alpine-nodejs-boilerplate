#!/bin/bash

###
# environment install script for Alpine Linux on Docker
###
runInstall () {
    local DIVIDER="===================="
    local TEMPLATE="\n\n${DIVIDER}${DIVIDER}${DIVIDER}\n%s\n\n\n"

    ###
    # NOTE: setup script dependencies
    ###
    printf "${TEMPLATE}" "Installing supporting scripts"
    setupScripts

    ###
    # NOTE: install Node.js LTS build dependencies
    ###
    printf "${TEMPLATE}" "Installing Node.js LTS build dependencies"
    nodeDepsInstall

    ###
    # NOTE: setup project
    ###
    printf "${TEMPLATE}" "Installing Node.js Dev Dependencies"
    if [[ "${NODE_ENV}" == "development" ]]; then
        npm install --quiet -g gulp-cli
    fi

    printf "${TEMPLATE}" "Installing Node.js Dependencies"
    projectInstall

    ###
    # NOTE: add additional file/folder removal here for all images
    ###
    printf "${TEMPLATE}" "Removing Alpine Linux Package Cache, /tmp, and Node.js dependencies"
    if [[ "${NODE_ENV}" == "production" ]]; then
        nodeDepsUninstall
    fi
    clearApkCache
}

setupScripts () {
    apk add \
        git \
        tar

    mkdir /opt/scripts
    git archive --format=tar --remote=https://github.com/aeilers/docker-alpine-script-lib.git HEAD | tar xf - -C /opt/scripts/

    if [[ "${NODE_ENV}" == "production" ]]; then
        apk del \
            git \
            tar
    fi

    mkdir /opt/scripts/test
    find /opt/scripts/ -maxdepth 1 -type d -not -name base -not -name nodejs -not -name "." -exec rm -ir {} \;

    chmod +x /opt/scripts/base/*
    ln -s /opt/scripts/base/* /usr/local/bin/

    chmod +x /opt/scripts/nodejs/*
    ln -s /opt/scripts/nodejs/* /usr/local/bin/
}

runInstall && exit 0
